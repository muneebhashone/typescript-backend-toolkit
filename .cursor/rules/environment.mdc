---
globs: .env*,config.service.ts
description: Environment configuration and secrets management
---

# Environment Configuration

## Configuration Files

- `.env.sample` - Template with all available variables
- `.env` - Local development (gitignored)
- `.env.local` - Local production build (gitignored)
- `.env.production` - Production environment (gitignored)
- [src/config/env.ts](mdc:src/config/env.ts) - Type-safe config with Zod validation

## Configuration Pattern

All environment variables are validated and typed in [env.ts](mdc:src/config/env.ts):

```typescript
import { z } from 'zod';

const configSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']),
  PORT: z.string().transform(Number),
  DATABASE_URL: z.string().url(),
  JWT_SECRET: z.string().min(32),
  // ... more config
});

export type Config = z.infer<typeof configSchema>;

export const config: Config = configSchema.parse({
  NODE_ENV: process.env.NODE_ENV || 'development',
  PORT: process.env.PORT || '3000',
  DATABASE_URL: process.env.DATABASE_URL,
  JWT_SECRET: process.env.JWT_SECRET,
  // ... more config
});
```

## Time Duration Format

All time-based config values use milliseconds internally:

```typescript
// In .env
JWT_EXPIRES_IN=7d
OTP_EXPIRES_IN=10m

// In env.ts - convert to milliseconds
import ms from "ms";

JWT_EXPIRES_IN: z.string().transform((val) => ms(val)),
// Converts "7d" → 604800000ms
```

## Required Environment Variables

### Core

```bash
NODE_ENV=development
PORT=3000
```

### Database

```bash
DATABASE_URL=mongodb://localhost:27017/your-db
```

### Authentication

```bash
JWT_SECRET=your-super-secret-key-at-least-32-characters
JWT_EXPIRES_IN=7d
OTP_EXPIRES_IN=10m
OTP_SECRET=your-otp-secret-key
```

### Redis

```bash
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
```

### AWS S3 (File Uploads)

```bash
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_S3_BUCKET=your-bucket-name
```

### Email (Mailgun)

```bash
MAILGUN_API_KEY=your-mailgun-api-key
MAILGUN_DOMAIN=your-domain.com
MAILGUN_FROM=noreply@your-domain.com
```

### OAuth (Google)

```bash
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_CALLBACK_URL=http://localhost:3000/api/auth/google/callback
```

### Session

```bash
SESSION_SECRET=your-session-secret-key
```

### Frontend URL

```bash
FRONTEND_URL=http://localhost:5173
```

## Adding New Config Variables

### Step 1: Add to `.env.sample`

```bash
# New Feature Config
NEW_API_KEY=your-api-key
NEW_API_TIMEOUT=30s
```

### Step 2: Add to config schema

```typescript
// In src/config/env.ts
const configSchema = z.object({
  // ... existing config
  NEW_API_KEY: z.string().min(1),
  NEW_API_TIMEOUT: z.string().transform((val) => ms(val)),
});
```

### Step 3: Parse from environment

```typescript
export const config: Config = configSchema.parse({
  // ... existing config
  NEW_API_KEY: process.env.NEW_API_KEY,
  NEW_API_TIMEOUT: process.env.NEW_API_TIMEOUT || '30s',
});
```

### Step 4: Use in code

```typescript
import config from '@/config/env';

const apiKey = config.NEW_API_KEY;
const timeout = config.NEW_API_TIMEOUT; // In milliseconds
```

## Best Practices

### Security

- NEVER commit actual `.env` files to git
- Keep secrets in environment variables, not hardcoded
- Use different secrets for development and production
- Rotate secrets regularly

### Validation

- Always validate with Zod in env.ts
- Fail fast if required config is missing
- Provide sensible defaults where appropriate
- Use type inference for type safety

### Documentation

- Document all variables in `.env.sample`
- Add comments explaining what each variable does
- Provide example values
- Indicate which variables are required vs optional

### Time Values

- Always use human-readable format in .env (e.g., "7d", "10m", "30s")
- Convert to milliseconds in env.ts using `ms` package
- Never use raw milliseconds in .env files

## Docker Setup

For local development with Docker:

```bash
# Start services
docker compose up -d

# Services included:
# - MongoDB (port 27017)
# - Redis (port 6379)
```

## Common Mistakes to Avoid

❌ DON'T access `process.env` directly in code
✅ DO import from `env.ts`

❌ DON'T use hardcoded values
✅ DO use environment variables

❌ DON'T forget to validate new config variables
✅ DO add Zod validation in env.ts

❌ DON'T commit `.env` files
✅ DO commit `.env.sample` as template
