---
description: Step-by-step guide for creating a new module
---

# Creating a New Module

Follow these steps to create a new module in the backend toolkit.

## Step 1: Create Module Directory

```bash
mkdir -p src/modules/module-name
```

## Step 2: Create Model (`module.model.ts`)

```typescript
import { Schema, model, type Document } from 'mongoose';

export interface IModule extends Document {
  name: string;
  description: string;
  status: 'active' | 'inactive';
  createdAt: Date;
  updatedAt: Date;
}

const schema = new Schema<IModule>(
  {
    name: { type: String, required: true },
    description: { type: String },
    status: {
      type: String,
      enum: ['active', 'inactive'],
      default: 'active',
    },
  },
  { timestamps: true },
);

export const ModuleModel = model<IModule>('Module', schema);
```

## Step 3: Create DTOs (`module.dto.ts`)

```typescript
export interface CreateModuleInput {
  name: string;
  description?: string;
}

export interface UpdateModuleInput {
  name?: string;
  description?: string;
  status?: 'active' | 'inactive';
}

export interface ModuleResponse {
  id: string;
  name: string;
  description?: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}
```

## Step 4: Create Schemas (`module.schema.ts`)

```typescript
import { z } from 'zod';
import '@/openapi/zod-extend';

const ModuleResponseSchema = z.object({
  id: z.string().openapi({ example: '507f1f77bcf86cd799439011' }),
  name: z.string().openapi({ example: 'Module Name' }),
  description: z.string().optional(),
  status: z.enum(['active', 'inactive']),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
});

const CreateModuleSchema = z.object({
  name: z.string().min(2),
  description: z.string().optional(),
});

const UpdateModuleSchema = z.object({
  name: z.string().min(2).optional(),
  description: z.string().optional(),
  status: z.enum(['active', 'inactive']).optional(),
});

const ParamsSchema = z.object({
  id: z.string().regex(/^[0-9a-fA-F]{24}$/, 'Invalid ID'),
});

const QuerySchema = z.object({
  page: z
    .string()
    .transform(Number)
    .pipe(z.number().int().positive())
    .optional(),
  limit: z
    .string()
    .transform(Number)
    .pipe(z.number().int().positive())
    .optional(),
  search: z.string().optional(),
});

export const listSchema = {
  request: { query: QuerySchema },
  response: {
    200: z.object({
      data: z.array(ModuleResponseSchema),
      pagination: z.object({
        page: z.number(),
        limit: z.number(),
        total: z.number(),
      }),
    }),
  },
};

export const getSchema = {
  request: { params: ParamsSchema },
  response: {
    200: ModuleResponseSchema,
    404: z.object({ message: z.string() }),
  },
};

export const createSchema = {
  request: { body: CreateModuleSchema },
  response: {
    201: ModuleResponseSchema,
    400: z.object({ message: z.string() }),
  },
};

export const updateSchema = {
  request: {
    params: ParamsSchema,
    body: UpdateModuleSchema,
  },
  response: {
    200: ModuleResponseSchema,
    404: z.object({ message: z.string() }),
  },
};

export const deleteSchema = {
  request: { params: ParamsSchema },
  response: {
    200: z.object({ message: z.string() }),
    404: z.object({ message: z.string() }),
  },
};
```

## Step 5: Create Service (`module.service.ts`)

```typescript
import { ModuleModel } from './module.model';
import type { CreateModuleInput, UpdateModuleInput } from './module.dto';

export const findAll = async (options: {
  page: number;
  limit: number;
  search?: string;
}) => {
  const { page, limit, search } = options;
  const skip = (page - 1) * limit;

  const query = search ? { name: { $regex: search, $options: 'i' } } : {};

  const [data, total] = await Promise.all([
    ModuleModel.find(query).skip(skip).limit(limit).lean(),
    ModuleModel.countDocuments(query),
  ]);

  return {
    data: data.map((item) => ({
      id: item._id.toString(),
      name: item.name,
      description: item.description,
      status: item.status,
      createdAt: item.createdAt.toISOString(),
      updatedAt: item.updatedAt.toISOString(),
    })),
    pagination: {
      page,
      limit,
      total,
    },
  };
};

export const findById = async (id: string) => {
  const item = await ModuleModel.findById(id).lean();

  if (!item) {
    return null;
  }

  return {
    id: item._id.toString(),
    name: item.name,
    description: item.description,
    status: item.status,
    createdAt: item.createdAt.toISOString(),
    updatedAt: item.updatedAt.toISOString(),
  };
};

export const create = async (data: CreateModuleInput) => {
  const item = await ModuleModel.create(data);

  return {
    id: item._id.toString(),
    name: item.name,
    description: item.description,
    status: item.status,
    createdAt: item.createdAt.toISOString(),
    updatedAt: item.updatedAt.toISOString(),
  };
};

export const update = async (id: string, data: UpdateModuleInput) => {
  const item = await ModuleModel.findByIdAndUpdate(
    id,
    { $set: data },
    { new: true },
  ).lean();

  if (!item) {
    return null;
  }

  return {
    id: item._id.toString(),
    name: item.name,
    description: item.description,
    status: item.status,
    createdAt: item.createdAt.toISOString(),
    updatedAt: item.updatedAt.toISOString(),
  };
};

export const remove = async (id: string) => {
  const item = await ModuleModel.findByIdAndDelete(id);
  return !!item;
};
```

## Step 6: Create Controller (`module.controller.ts`)

```typescript
import type { Request, Response } from 'express';
import * as service from './module.service';

export const list = async (req: Request, res: Response) => {
  const { page = 1, limit = 10, search } = req.query;

  const result = await service.findAll({
    page: Number(page),
    limit: Number(limit),
    search: search as string,
  });

  return res.status(200).json(result);
};

export const getById = async (req: Request, res: Response) => {
  const { id } = req.params;

  const item = await service.findById(id);

  if (!item) {
    return res.status(404).json({ message: 'Item not found' });
  }

  return res.status(200).json(item);
};

export const create = async (req: Request, res: Response) => {
  const data = req.body;

  const item = await service.create(data);

  return res.status(201).json(item);
};

export const update = async (req: Request, res: Response) => {
  const { id } = req.params;
  const data = req.body;

  const item = await service.update(id, data);

  if (!item) {
    return res.status(404).json({ message: 'Item not found' });
  }

  return res.status(200).json(item);
};

export const remove = async (req: Request, res: Response) => {
  const { id } = req.params;

  const deleted = await service.remove(id);

  if (!deleted) {
    return res.status(404).json({ message: 'Item not found' });
  }

  return res.status(200).json({ message: 'Item deleted successfully' });
};
```

## Step 7: Create Router (`module.router.ts`)

```typescript
import { MagicRouter } from '@/openapi/magic-router';
import { extractJwtSchema } from '@/middlewares/extract-jwt-schema';
import * as controller from './module.controller';
import * as schemas from './module.schema';

const router = MagicRouter();

router.get({
  path: '/modules',
  schemas: schemas.listSchema,
  controller: controller.list,
  tags: ['Module'],
  summary: 'List all modules',
  middlewares: [extractJwtSchema],
});

router.get({
  path: '/modules/:id',
  schemas: schemas.getSchema,
  controller: controller.getById,
  tags: ['Module'],
  summary: 'Get module by ID',
  middlewares: [extractJwtSchema],
});

router.post({
  path: '/modules',
  schemas: schemas.createSchema,
  controller: controller.create,
  tags: ['Module'],
  summary: 'Create new module',
  middlewares: [extractJwtSchema],
});

router.put({
  path: '/modules/:id',
  schemas: schemas.updateSchema,
  controller: controller.update,
  tags: ['Module'],
  summary: 'Update module',
  middlewares: [extractJwtSchema],
});

router.delete({
  path: '/modules/:id',
  schemas: schemas.deleteSchema,
  controller: controller.remove,
  tags: ['Module'],
  summary: 'Delete module',
  middlewares: [extractJwtSchema],
});

export default router;
```

## Step 8: Register Router

Add to [src/routes/routes.ts](mdc:src/routes/routes.ts):

```typescript
import moduleRouter from '@/modules/module-name/module.router';

// In the registerRoutes function
app.use('/api', moduleRouter);
```

## Step 9: Test

1. Start the server: `pnpm run dev`
2. Visit API docs: `http://localhost:3000/api-docs`
3. Test endpoints using Swagger UI

## Optional: Add to Seeder

If you want seed data, create `module.seeder.ts`:

```typescript
import { ModuleModel } from './module.model';

export const seedModules = async () => {
  const count = await ModuleModel.countDocuments();

  if (count > 0) {
    console.log('Modules already seeded');
    return;
  }

  await ModuleModel.create([
    { name: 'Module 1', description: 'First module' },
    { name: 'Module 2', description: 'Second module' },
  ]);

  console.log('Modules seeded');
};
```

Register in main seeder script.

## Checklist

- [ ] Created model with proper schema
- [ ] Created DTOs for type safety
- [ ] Created Zod schemas with OpenAPI metadata
- [ ] Created service with business logic
- [ ] Created controller with HTTP handling
- [ ] Created router with MagicRouter
- [ ] Registered router in routes.ts
- [ ] Tested in Swagger UI
- [ ] (Optional) Created seeder
